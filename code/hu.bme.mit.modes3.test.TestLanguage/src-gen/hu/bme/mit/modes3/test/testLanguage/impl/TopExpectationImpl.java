/**
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.modes3.test.testLanguage.impl;

import hu.bme.mit.modes3.test.testLanguage.TestLanguagePackage;
import hu.bme.mit.modes3.test.testLanguage.TopExpectation;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Expectation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.TopExpectationImpl#getTopExpectedState <em>Top Expected State</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.TopExpectationImpl#getTopID <em>Top ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopExpectationImpl extends MinimalEObjectImpl.Container implements TopExpectation
{
  /**
   * The default value of the '{@link #getTopExpectedState() <em>Top Expected State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTopExpectedState()
   * @generated
   * @ordered
   */
  protected static final String TOP_EXPECTED_STATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTopExpectedState() <em>Top Expected State</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTopExpectedState()
   * @generated
   * @ordered
   */
  protected String topExpectedState = TOP_EXPECTED_STATE_EDEFAULT;

  /**
   * The default value of the '{@link #getTopID() <em>Top ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTopID()
   * @generated
   * @ordered
   */
  protected static final int TOP_ID_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTopID() <em>Top ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTopID()
   * @generated
   * @ordered
   */
  protected int topID = TOP_ID_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TopExpectationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestLanguagePackage.Literals.TOP_EXPECTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTopExpectedState()
  {
    return topExpectedState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTopExpectedState(String newTopExpectedState)
  {
    String oldTopExpectedState = topExpectedState;
    topExpectedState = newTopExpectedState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.TOP_EXPECTATION__TOP_EXPECTED_STATE, oldTopExpectedState, topExpectedState));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTopID()
  {
    return topID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTopID(int newTopID)
  {
    int oldTopID = topID;
    topID = newTopID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.TOP_EXPECTATION__TOP_ID, oldTopID, topID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestLanguagePackage.TOP_EXPECTATION__TOP_EXPECTED_STATE:
        return getTopExpectedState();
      case TestLanguagePackage.TOP_EXPECTATION__TOP_ID:
        return getTopID();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestLanguagePackage.TOP_EXPECTATION__TOP_EXPECTED_STATE:
        setTopExpectedState((String)newValue);
        return;
      case TestLanguagePackage.TOP_EXPECTATION__TOP_ID:
        setTopID((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.TOP_EXPECTATION__TOP_EXPECTED_STATE:
        setTopExpectedState(TOP_EXPECTED_STATE_EDEFAULT);
        return;
      case TestLanguagePackage.TOP_EXPECTATION__TOP_ID:
        setTopID(TOP_ID_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.TOP_EXPECTATION__TOP_EXPECTED_STATE:
        return TOP_EXPECTED_STATE_EDEFAULT == null ? topExpectedState != null : !TOP_EXPECTED_STATE_EDEFAULT.equals(topExpectedState);
      case TestLanguagePackage.TOP_EXPECTATION__TOP_ID:
        return topID != TOP_ID_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (topExpectedState: ");
    result.append(topExpectedState);
    result.append(", topID: ");
    result.append(topID);
    result.append(')');
    return result.toString();
  }

} //TopExpectationImpl
