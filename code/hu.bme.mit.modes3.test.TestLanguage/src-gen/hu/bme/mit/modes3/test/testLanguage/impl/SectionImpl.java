/**
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.modes3.test.testLanguage.impl;

import hu.bme.mit.modes3.test.testLanguage.DivergentSection;
import hu.bme.mit.modes3.test.testLanguage.Section;
import hu.bme.mit.modes3.test.testLanguage.StraightSection;
import hu.bme.mit.modes3.test.testLanguage.TestLanguagePackage;
import hu.bme.mit.modes3.test.testLanguage.TopSection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Section</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.SectionImpl#getStraightSection <em>Straight Section</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.SectionImpl#getDivergentSection <em>Divergent Section</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.SectionImpl#getTopSection <em>Top Section</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SectionImpl extends MinimalEObjectImpl.Container implements Section
{
  /**
   * The cached value of the '{@link #getStraightSection() <em>Straight Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStraightSection()
   * @generated
   * @ordered
   */
  protected StraightSection straightSection;

  /**
   * The cached value of the '{@link #getDivergentSection() <em>Divergent Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDivergentSection()
   * @generated
   * @ordered
   */
  protected DivergentSection divergentSection;

  /**
   * The cached value of the '{@link #getTopSection() <em>Top Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTopSection()
   * @generated
   * @ordered
   */
  protected TopSection topSection;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestLanguagePackage.Literals.SECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StraightSection getStraightSection()
  {
    return straightSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStraightSection(StraightSection newStraightSection, NotificationChain msgs)
  {
    StraightSection oldStraightSection = straightSection;
    straightSection = newStraightSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.SECTION__STRAIGHT_SECTION, oldStraightSection, newStraightSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStraightSection(StraightSection newStraightSection)
  {
    if (newStraightSection != straightSection)
    {
      NotificationChain msgs = null;
      if (straightSection != null)
        msgs = ((InternalEObject)straightSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.SECTION__STRAIGHT_SECTION, null, msgs);
      if (newStraightSection != null)
        msgs = ((InternalEObject)newStraightSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.SECTION__STRAIGHT_SECTION, null, msgs);
      msgs = basicSetStraightSection(newStraightSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.SECTION__STRAIGHT_SECTION, newStraightSection, newStraightSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DivergentSection getDivergentSection()
  {
    return divergentSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDivergentSection(DivergentSection newDivergentSection, NotificationChain msgs)
  {
    DivergentSection oldDivergentSection = divergentSection;
    divergentSection = newDivergentSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.SECTION__DIVERGENT_SECTION, oldDivergentSection, newDivergentSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDivergentSection(DivergentSection newDivergentSection)
  {
    if (newDivergentSection != divergentSection)
    {
      NotificationChain msgs = null;
      if (divergentSection != null)
        msgs = ((InternalEObject)divergentSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.SECTION__DIVERGENT_SECTION, null, msgs);
      if (newDivergentSection != null)
        msgs = ((InternalEObject)newDivergentSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.SECTION__DIVERGENT_SECTION, null, msgs);
      msgs = basicSetDivergentSection(newDivergentSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.SECTION__DIVERGENT_SECTION, newDivergentSection, newDivergentSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TopSection getTopSection()
  {
    return topSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTopSection(TopSection newTopSection, NotificationChain msgs)
  {
    TopSection oldTopSection = topSection;
    topSection = newTopSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.SECTION__TOP_SECTION, oldTopSection, newTopSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTopSection(TopSection newTopSection)
  {
    if (newTopSection != topSection)
    {
      NotificationChain msgs = null;
      if (topSection != null)
        msgs = ((InternalEObject)topSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.SECTION__TOP_SECTION, null, msgs);
      if (newTopSection != null)
        msgs = ((InternalEObject)newTopSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.SECTION__TOP_SECTION, null, msgs);
      msgs = basicSetTopSection(newTopSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.SECTION__TOP_SECTION, newTopSection, newTopSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestLanguagePackage.SECTION__STRAIGHT_SECTION:
        return basicSetStraightSection(null, msgs);
      case TestLanguagePackage.SECTION__DIVERGENT_SECTION:
        return basicSetDivergentSection(null, msgs);
      case TestLanguagePackage.SECTION__TOP_SECTION:
        return basicSetTopSection(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestLanguagePackage.SECTION__STRAIGHT_SECTION:
        return getStraightSection();
      case TestLanguagePackage.SECTION__DIVERGENT_SECTION:
        return getDivergentSection();
      case TestLanguagePackage.SECTION__TOP_SECTION:
        return getTopSection();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestLanguagePackage.SECTION__STRAIGHT_SECTION:
        setStraightSection((StraightSection)newValue);
        return;
      case TestLanguagePackage.SECTION__DIVERGENT_SECTION:
        setDivergentSection((DivergentSection)newValue);
        return;
      case TestLanguagePackage.SECTION__TOP_SECTION:
        setTopSection((TopSection)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.SECTION__STRAIGHT_SECTION:
        setStraightSection((StraightSection)null);
        return;
      case TestLanguagePackage.SECTION__DIVERGENT_SECTION:
        setDivergentSection((DivergentSection)null);
        return;
      case TestLanguagePackage.SECTION__TOP_SECTION:
        setTopSection((TopSection)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.SECTION__STRAIGHT_SECTION:
        return straightSection != null;
      case TestLanguagePackage.SECTION__DIVERGENT_SECTION:
        return divergentSection != null;
      case TestLanguagePackage.SECTION__TOP_SECTION:
        return topSection != null;
    }
    return super.eIsSet(featureID);
  }

} //SectionImpl
