/**
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.modes3.test.testLanguage.impl;

import hu.bme.mit.modes3.test.testLanguage.Component;
import hu.bme.mit.modes3.test.testLanguage.Section;
import hu.bme.mit.modes3.test.testLanguage.TestLanguagePackage;
import hu.bme.mit.modes3.test.testLanguage.Turnout;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.ComponentImpl#getTurnout <em>Turnout</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.ComponentImpl#getSection <em>Section</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends MinimalEObjectImpl.Container implements Component
{
  /**
   * The cached value of the '{@link #getTurnout() <em>Turnout</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTurnout()
   * @generated
   * @ordered
   */
  protected Turnout turnout;

  /**
   * The cached value of the '{@link #getSection() <em>Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSection()
   * @generated
   * @ordered
   */
  protected Section section;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestLanguagePackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Turnout getTurnout()
  {
    return turnout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTurnout(Turnout newTurnout, NotificationChain msgs)
  {
    Turnout oldTurnout = turnout;
    turnout = newTurnout;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.COMPONENT__TURNOUT, oldTurnout, newTurnout);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTurnout(Turnout newTurnout)
  {
    if (newTurnout != turnout)
    {
      NotificationChain msgs = null;
      if (turnout != null)
        msgs = ((InternalEObject)turnout).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.COMPONENT__TURNOUT, null, msgs);
      if (newTurnout != null)
        msgs = ((InternalEObject)newTurnout).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.COMPONENT__TURNOUT, null, msgs);
      msgs = basicSetTurnout(newTurnout, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.COMPONENT__TURNOUT, newTurnout, newTurnout));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Section getSection()
  {
    return section;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSection(Section newSection, NotificationChain msgs)
  {
    Section oldSection = section;
    section = newSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.COMPONENT__SECTION, oldSection, newSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSection(Section newSection)
  {
    if (newSection != section)
    {
      NotificationChain msgs = null;
      if (section != null)
        msgs = ((InternalEObject)section).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.COMPONENT__SECTION, null, msgs);
      if (newSection != null)
        msgs = ((InternalEObject)newSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.COMPONENT__SECTION, null, msgs);
      msgs = basicSetSection(newSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.COMPONENT__SECTION, newSection, newSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestLanguagePackage.COMPONENT__TURNOUT:
        return basicSetTurnout(null, msgs);
      case TestLanguagePackage.COMPONENT__SECTION:
        return basicSetSection(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestLanguagePackage.COMPONENT__TURNOUT:
        return getTurnout();
      case TestLanguagePackage.COMPONENT__SECTION:
        return getSection();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestLanguagePackage.COMPONENT__TURNOUT:
        setTurnout((Turnout)newValue);
        return;
      case TestLanguagePackage.COMPONENT__SECTION:
        setSection((Section)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.COMPONENT__TURNOUT:
        setTurnout((Turnout)null);
        return;
      case TestLanguagePackage.COMPONENT__SECTION:
        setSection((Section)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.COMPONENT__TURNOUT:
        return turnout != null;
      case TestLanguagePackage.COMPONENT__SECTION:
        return section != null;
    }
    return super.eIsSet(featureID);
  }

} //ComponentImpl
