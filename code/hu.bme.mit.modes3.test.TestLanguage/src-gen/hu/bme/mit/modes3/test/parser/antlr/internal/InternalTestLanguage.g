/*
 * generated by Xtext 2.9.1
 */
grammar InternalTestLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.modes3.test.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.modes3.test.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.modes3.test.services.TestLanguageGrammarAccess;

}

@parser::members {

 	private TestLanguageGrammarAccess grammarAccess;

    public InternalTestLanguageParser(TokenStream input, TestLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TestLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCaseDescriptionCaseDescriptionParserRuleCall_0());
			}
			lv_caseDescription_0_0=ruleCaseDescription
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"caseDescription",
					lv_caseDescription_0_0,
					"hu.bme.mit.modes3.test.TestLanguage.CaseDescription");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCaseDescription
entryRuleCaseDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseDescriptionRule()); }
	iv_ruleCaseDescription=ruleCaseDescription
	{ $current=$iv_ruleCaseDescription.current; }
	EOF;

// Rule CaseDescription
ruleCaseDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[TestCase]'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseDescriptionAccess().getTestCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseDescriptionAccess().getCaseNameCaseNameParserRuleCall_1_0());
				}
				lv_caseName_1_0=ruleCaseName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseDescriptionRule());
					}
					set(
						$current,
						"caseName",
						lv_caseName_1_0,
						"hu.bme.mit.modes3.test.TestLanguage.CaseName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseDescriptionAccess().getCommentCommentParserRuleCall_2_0());
				}
				lv_comment_2_0=ruleComment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseDescriptionRule());
					}
					set(
						$current,
						"comment",
						lv_comment_2_0,
						"hu.bme.mit.modes3.test.TestLanguage.Comment");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseDescriptionAccess().getComponentsComponentParserRuleCall_3_0());
				}
				lv_components_3_0=ruleComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseDescriptionRule());
					}
					add(
						$current,
						"components",
						lv_components_3_0,
						"hu.bme.mit.modes3.test.TestLanguage.Component");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseDescriptionAccess().getExpectExpectationsParserRuleCall_4_0());
				}
				lv_expect_4_0=ruleExpectations
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseDescriptionRule());
					}
					add(
						$current,
						"expect",
						lv_expect_4_0,
						"hu.bme.mit.modes3.test.TestLanguage.Expectations");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleCaseName
entryRuleCaseName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseNameRule()); }
	iv_ruleCaseName=ruleCaseName
	{ $current=$iv_ruleCaseName.current; }
	EOF;

// Rule CaseName
ruleCaseName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Name of the test case is '
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseNameAccess().getNameOfTheTestCaseIsKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCaseNameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleComment
entryRuleComment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommentRule()); }
	iv_ruleComment=ruleComment
	{ $current=$iv_ruleComment.current; }
	EOF;

// Rule Comment
ruleComment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Short description'
		{
			newLeafNode(otherlv_0, grammarAccess.getCommentAccess().getShortDescriptionKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommentAccess().getColonKeyword_1());
		}
		(
			(
				lv_comment_2_0=RULE_STRING
				{
					newLeafNode(lv_comment_2_0, grammarAccess.getCommentAccess().getCommentSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCommentRule());
					}
					setWithLastConsumed(
						$current,
						"comment",
						lv_comment_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	iv_ruleComponent=ruleComponent
	{ $current=$iv_ruleComponent.current; }
	EOF;

// Rule Component
ruleComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[Component]'
		{
			newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getTurnoutTurnoutParserRuleCall_1_0());
				}
				lv_turnout_1_0=ruleTurnout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					set(
						$current,
						"turnout",
						lv_turnout_1_0,
						"hu.bme.mit.modes3.test.TestLanguage.Turnout");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getSectionSectionParserRuleCall_2_0());
				}
				lv_section_2_0=ruleSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					set(
						$current,
						"section",
						lv_section_2_0,
						"hu.bme.mit.modes3.test.TestLanguage.Section");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTurnout
entryRuleTurnout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnoutRule()); }
	iv_ruleTurnout=ruleTurnout
	{ $current=$iv_ruleTurnout.current; }
	EOF;

// Rule Turnout
ruleTurnout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Turnout '
		{
			newLeafNode(otherlv_0, grammarAccess.getTurnoutAccess().getTurnoutKeyword_0());
		}
		(
			(
				lv_turnoutID_1_0=RULE_INT
				{
					newLeafNode(lv_turnoutID_1_0, grammarAccess.getTurnoutAccess().getTurnoutIDINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTurnoutRule());
					}
					setWithLastConsumed(
						$current,
						"turnoutID",
						lv_turnoutID_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=' is '
		{
			newLeafNode(otherlv_2, grammarAccess.getTurnoutAccess().getIsKeyword_2());
		}
		(
			(
				(
					lv_turnoutState_3_1='STRAIGHT'
					{
						newLeafNode(lv_turnoutState_3_1, grammarAccess.getTurnoutAccess().getTurnoutStateSTRAIGHTKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTurnoutRule());
						}
						setWithLastConsumed($current, "turnoutState", lv_turnoutState_3_1, null);
					}
					    |
					lv_turnoutState_3_2='DIVERGENT'
					{
						newLeafNode(lv_turnoutState_3_2, grammarAccess.getTurnoutAccess().getTurnoutStateDIVERGENTKeyword_3_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTurnoutRule());
						}
						setWithLastConsumed($current, "turnoutState", lv_turnoutState_3_2, null);
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSection
entryRuleSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSectionRule()); }
	iv_ruleSection=ruleSection
	{ $current=$iv_ruleSection.current; }
	EOF;

// Rule Section
ruleSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getStraightSectionStraightSectionParserRuleCall_0_0());
				}
				lv_straightSection_0_0=ruleStraightSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"straightSection",
						lv_straightSection_0_0,
						"hu.bme.mit.modes3.test.TestLanguage.StraightSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getDivergentSectionDivergentSectionParserRuleCall_1_0());
				}
				lv_divergentSection_1_0=ruleDivergentSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"divergentSection",
						lv_divergentSection_1_0,
						"hu.bme.mit.modes3.test.TestLanguage.DivergentSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSectionAccess().getTopSectionTopSectionParserRuleCall_2_0());
				}
				lv_topSection_2_0=ruleTopSection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSectionRule());
					}
					set(
						$current,
						"topSection",
						lv_topSection_2_0,
						"hu.bme.mit.modes3.test.TestLanguage.TopSection");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStraightSection
entryRuleStraightSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStraightSectionRule()); }
	iv_ruleStraightSection=ruleStraightSection
	{ $current=$iv_ruleStraightSection.current; }
	EOF;

// Rule StraightSection
ruleStraightSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Section connecting from STRAIGHT is '
		{
			newLeafNode(otherlv_0, grammarAccess.getStraightSectionAccess().getSectionConnectingFromSTRAIGHTIsKeyword_0());
		}
		(
			(
				(
					lv_straightSectionState_1_1='FREE'
					{
						newLeafNode(lv_straightSectionState_1_1, grammarAccess.getStraightSectionAccess().getStraightSectionStateFREEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStraightSectionRule());
						}
						setWithLastConsumed($current, "straightSectionState", lv_straightSectionState_1_1, null);
					}
					    |
					lv_straightSectionState_1_2='OCCUPIED'
					{
						newLeafNode(lv_straightSectionState_1_2, grammarAccess.getStraightSectionAccess().getStraightSectionStateOCCUPIEDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStraightSectionRule());
						}
						setWithLastConsumed($current, "straightSectionState", lv_straightSectionState_1_2, null);
					}
				)
			)
		)
		otherlv_2='Straight id'
		{
			newLeafNode(otherlv_2, grammarAccess.getStraightSectionAccess().getStraightIdKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getStraightSectionAccess().getColonKeyword_3());
		}
		(
			(
				lv_strID_4_0=RULE_INT
				{
					newLeafNode(lv_strID_4_0, grammarAccess.getStraightSectionAccess().getStrIDINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStraightSectionRule());
					}
					setWithLastConsumed(
						$current,
						"strID",
						lv_strID_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleDivergentSection
entryRuleDivergentSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivergentSectionRule()); }
	iv_ruleDivergentSection=ruleDivergentSection
	{ $current=$iv_ruleDivergentSection.current; }
	EOF;

// Rule DivergentSection
ruleDivergentSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Section connecting from DIVERGENT is '
		{
			newLeafNode(otherlv_0, grammarAccess.getDivergentSectionAccess().getSectionConnectingFromDIVERGENTIsKeyword_0());
		}
		(
			(
				(
					lv_divergentSectionState_1_1='FREE'
					{
						newLeafNode(lv_divergentSectionState_1_1, grammarAccess.getDivergentSectionAccess().getDivergentSectionStateFREEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivergentSectionRule());
						}
						setWithLastConsumed($current, "divergentSectionState", lv_divergentSectionState_1_1, null);
					}
					    |
					lv_divergentSectionState_1_2='OCCUPIED'
					{
						newLeafNode(lv_divergentSectionState_1_2, grammarAccess.getDivergentSectionAccess().getDivergentSectionStateOCCUPIEDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivergentSectionRule());
						}
						setWithLastConsumed($current, "divergentSectionState", lv_divergentSectionState_1_2, null);
					}
				)
			)
		)
		otherlv_2='Divergent id'
		{
			newLeafNode(otherlv_2, grammarAccess.getDivergentSectionAccess().getDivergentIdKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getDivergentSectionAccess().getColonKeyword_3());
		}
		(
			(
				lv_divID_4_0=RULE_INT
				{
					newLeafNode(lv_divID_4_0, grammarAccess.getDivergentSectionAccess().getDivIDINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDivergentSectionRule());
					}
					setWithLastConsumed(
						$current,
						"divID",
						lv_divID_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTopSection
entryRuleTopSection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopSectionRule()); }
	iv_ruleTopSection=ruleTopSection
	{ $current=$iv_ruleTopSection.current; }
	EOF;

// Rule TopSection
ruleTopSection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Section connecting from TOP is '
		{
			newLeafNode(otherlv_0, grammarAccess.getTopSectionAccess().getSectionConnectingFromTOPIsKeyword_0());
		}
		(
			(
				(
					lv_topSectionState_1_1='FREE'
					{
						newLeafNode(lv_topSectionState_1_1, grammarAccess.getTopSectionAccess().getTopSectionStateFREEKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTopSectionRule());
						}
						setWithLastConsumed($current, "topSectionState", lv_topSectionState_1_1, null);
					}
					    |
					lv_topSectionState_1_2='OCCUPIED'
					{
						newLeafNode(lv_topSectionState_1_2, grammarAccess.getTopSectionAccess().getTopSectionStateOCCUPIEDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTopSectionRule());
						}
						setWithLastConsumed($current, "topSectionState", lv_topSectionState_1_2, null);
					}
				)
			)
		)
		otherlv_2='Top id'
		{
			newLeafNode(otherlv_2, grammarAccess.getTopSectionAccess().getTopIdKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getTopSectionAccess().getColonKeyword_3());
		}
		(
			(
				lv_topID_4_0=RULE_INT
				{
					newLeafNode(lv_topID_4_0, grammarAccess.getTopSectionAccess().getTopIDINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTopSectionRule());
					}
					setWithLastConsumed(
						$current,
						"topID",
						lv_topID_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleExpectations
entryRuleExpectations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpectationsRule()); }
	iv_ruleExpectations=ruleExpectations
	{ $current=$iv_ruleExpectations.current; }
	EOF;

// Rule Expectations
ruleExpectations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[ExpectedComponents]'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpectationsAccess().getExpectedComponentsKeyword_0());
		}
		otherlv_1='Turnout '
		{
			newLeafNode(otherlv_1, grammarAccess.getExpectationsAccess().getTurnoutKeyword_1());
		}
		(
			(
				lv_expectedTurnoutID_2_0=RULE_INT
				{
					newLeafNode(lv_expectedTurnoutID_2_0, grammarAccess.getExpectationsAccess().getExpectedTurnoutIDINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpectationsRule());
					}
					setWithLastConsumed(
						$current,
						"expectedTurnoutID",
						lv_expectedTurnoutID_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpectationsAccess().getStraightExpectationStraightExpectationParserRuleCall_3_0());
				}
				lv_straightExpectation_3_0=ruleStraightExpectation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpectationsRule());
					}
					set(
						$current,
						"straightExpectation",
						lv_straightExpectation_3_0,
						"hu.bme.mit.modes3.test.TestLanguage.StraightExpectation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpectationsAccess().getDivergentExpectationDivergentExpectationParserRuleCall_4_0());
				}
				lv_divergentExpectation_4_0=ruleDivergentExpectation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpectationsRule());
					}
					set(
						$current,
						"divergentExpectation",
						lv_divergentExpectation_4_0,
						"hu.bme.mit.modes3.test.TestLanguage.DivergentExpectation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpectationsAccess().getTopExpectationTopExpectationParserRuleCall_5_0());
				}
				lv_topExpectation_5_0=ruleTopExpectation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpectationsRule());
					}
					set(
						$current,
						"topExpectation",
						lv_topExpectation_5_0,
						"hu.bme.mit.modes3.test.TestLanguage.TopExpectation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStraightExpectation
entryRuleStraightExpectation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStraightExpectationRule()); }
	iv_ruleStraightExpectation=ruleStraightExpectation
	{ $current=$iv_ruleStraightExpectation.current; }
	EOF;

// Rule StraightExpectation
ruleStraightExpectation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Section connecting from STRAIGHT is expected to be '
		{
			newLeafNode(otherlv_0, grammarAccess.getStraightExpectationAccess().getSectionConnectingFromSTRAIGHTIsExpectedToBeKeyword_0());
		}
		(
			(
				(
					lv_straightExpectedState_1_1='ENABLED'
					{
						newLeafNode(lv_straightExpectedState_1_1, grammarAccess.getStraightExpectationAccess().getStraightExpectedStateENABLEDKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStraightExpectationRule());
						}
						setWithLastConsumed($current, "straightExpectedState", lv_straightExpectedState_1_1, null);
					}
					    |
					lv_straightExpectedState_1_2='DISABLED'
					{
						newLeafNode(lv_straightExpectedState_1_2, grammarAccess.getStraightExpectationAccess().getStraightExpectedStateDISABLEDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStraightExpectationRule());
						}
						setWithLastConsumed($current, "straightExpectedState", lv_straightExpectedState_1_2, null);
					}
				)
			)
		)
		otherlv_2='Straight id'
		{
			newLeafNode(otherlv_2, grammarAccess.getStraightExpectationAccess().getStraightIdKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getStraightExpectationAccess().getColonKeyword_3());
		}
		(
			(
				lv_strID_4_0=RULE_INT
				{
					newLeafNode(lv_strID_4_0, grammarAccess.getStraightExpectationAccess().getStrIDINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStraightExpectationRule());
					}
					setWithLastConsumed(
						$current,
						"strID",
						lv_strID_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleDivergentExpectation
entryRuleDivergentExpectation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivergentExpectationRule()); }
	iv_ruleDivergentExpectation=ruleDivergentExpectation
	{ $current=$iv_ruleDivergentExpectation.current; }
	EOF;

// Rule DivergentExpectation
ruleDivergentExpectation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Section connecting from DIVERGENT is expected to be '
		{
			newLeafNode(otherlv_0, grammarAccess.getDivergentExpectationAccess().getSectionConnectingFromDIVERGENTIsExpectedToBeKeyword_0());
		}
		(
			(
				(
					lv_divergentExpectedState_1_1='ENABLED'
					{
						newLeafNode(lv_divergentExpectedState_1_1, grammarAccess.getDivergentExpectationAccess().getDivergentExpectedStateENABLEDKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivergentExpectationRule());
						}
						setWithLastConsumed($current, "divergentExpectedState", lv_divergentExpectedState_1_1, null);
					}
					    |
					lv_divergentExpectedState_1_2='DISABLED'
					{
						newLeafNode(lv_divergentExpectedState_1_2, grammarAccess.getDivergentExpectationAccess().getDivergentExpectedStateDISABLEDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDivergentExpectationRule());
						}
						setWithLastConsumed($current, "divergentExpectedState", lv_divergentExpectedState_1_2, null);
					}
				)
			)
		)
		otherlv_2='Divergent id'
		{
			newLeafNode(otherlv_2, grammarAccess.getDivergentExpectationAccess().getDivergentIdKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getDivergentExpectationAccess().getColonKeyword_3());
		}
		(
			(
				lv_divID_4_0=RULE_INT
				{
					newLeafNode(lv_divID_4_0, grammarAccess.getDivergentExpectationAccess().getDivIDINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDivergentExpectationRule());
					}
					setWithLastConsumed(
						$current,
						"divID",
						lv_divID_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTopExpectation
entryRuleTopExpectation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopExpectationRule()); }
	iv_ruleTopExpectation=ruleTopExpectation
	{ $current=$iv_ruleTopExpectation.current; }
	EOF;

// Rule TopExpectation
ruleTopExpectation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Section connecting from TOP is expected to be '
		{
			newLeafNode(otherlv_0, grammarAccess.getTopExpectationAccess().getSectionConnectingFromTOPIsExpectedToBeKeyword_0());
		}
		(
			(
				(
					lv_topExpectedState_1_1='ENABLED'
					{
						newLeafNode(lv_topExpectedState_1_1, grammarAccess.getTopExpectationAccess().getTopExpectedStateENABLEDKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTopExpectationRule());
						}
						setWithLastConsumed($current, "topExpectedState", lv_topExpectedState_1_1, null);
					}
					    |
					lv_topExpectedState_1_2='DISABLED'
					{
						newLeafNode(lv_topExpectedState_1_2, grammarAccess.getTopExpectationAccess().getTopExpectedStateDISABLEDKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTopExpectationRule());
						}
						setWithLastConsumed($current, "topExpectedState", lv_topExpectedState_1_2, null);
					}
				)
			)
		)
		otherlv_2='Top id'
		{
			newLeafNode(otherlv_2, grammarAccess.getTopExpectationAccess().getTopIdKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getTopExpectationAccess().getColonKeyword_3());
		}
		(
			(
				lv_topID_4_0=RULE_INT
				{
					newLeafNode(lv_topID_4_0, grammarAccess.getTopExpectationAccess().getTopIDINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTopExpectationRule());
					}
					setWithLastConsumed(
						$current,
						"topID",
						lv_topID_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
