/**
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.modes3.test.testLanguage.impl;

import hu.bme.mit.modes3.test.testLanguage.CaseDescription;
import hu.bme.mit.modes3.test.testLanguage.CaseName;
import hu.bme.mit.modes3.test.testLanguage.Expectations;
import hu.bme.mit.modes3.test.testLanguage.Steps;
import hu.bme.mit.modes3.test.testLanguage.TestLanguagePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Case Description</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getCaseName <em>Case Name</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getSteps <em>Steps</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getExpect <em>Expect</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CaseDescriptionImpl extends MinimalEObjectImpl.Container implements CaseDescription
{
  /**
   * The cached value of the '{@link #getCaseName() <em>Case Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseName()
   * @generated
   * @ordered
   */
  protected CaseName caseName;

  /**
   * The cached value of the '{@link #getSteps() <em>Steps</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSteps()
   * @generated
   * @ordered
   */
  protected Steps steps;

  /**
   * The cached value of the '{@link #getExpect() <em>Expect</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpect()
   * @generated
   * @ordered
   */
  protected Expectations expect;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CaseDescriptionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestLanguagePackage.Literals.CASE_DESCRIPTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CaseName getCaseName()
  {
    return caseName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCaseName(CaseName newCaseName, NotificationChain msgs)
  {
    CaseName oldCaseName = caseName;
    caseName = newCaseName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, oldCaseName, newCaseName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCaseName(CaseName newCaseName)
  {
    if (newCaseName != caseName)
    {
      NotificationChain msgs = null;
      if (caseName != null)
        msgs = ((InternalEObject)caseName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, null, msgs);
      if (newCaseName != null)
        msgs = ((InternalEObject)newCaseName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, null, msgs);
      msgs = basicSetCaseName(newCaseName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, newCaseName, newCaseName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Steps getSteps()
  {
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSteps(Steps newSteps, NotificationChain msgs)
  {
    Steps oldSteps = steps;
    steps = newSteps;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__STEPS, oldSteps, newSteps);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSteps(Steps newSteps)
  {
    if (newSteps != steps)
    {
      NotificationChain msgs = null;
      if (steps != null)
        msgs = ((InternalEObject)steps).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__STEPS, null, msgs);
      if (newSteps != null)
        msgs = ((InternalEObject)newSteps).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__STEPS, null, msgs);
      msgs = basicSetSteps(newSteps, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__STEPS, newSteps, newSteps));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expectations getExpect()
  {
    return expect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpect(Expectations newExpect, NotificationChain msgs)
  {
    Expectations oldExpect = expect;
    expect = newExpect;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__EXPECT, oldExpect, newExpect);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpect(Expectations newExpect)
  {
    if (newExpect != expect)
    {
      NotificationChain msgs = null;
      if (expect != null)
        msgs = ((InternalEObject)expect).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__EXPECT, null, msgs);
      if (newExpect != null)
        msgs = ((InternalEObject)newExpect).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__EXPECT, null, msgs);
      msgs = basicSetExpect(newExpect, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__EXPECT, newExpect, newExpect));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        return basicSetCaseName(null, msgs);
      case TestLanguagePackage.CASE_DESCRIPTION__STEPS:
        return basicSetSteps(null, msgs);
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        return basicSetExpect(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        return getCaseName();
      case TestLanguagePackage.CASE_DESCRIPTION__STEPS:
        return getSteps();
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        return getExpect();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        setCaseName((CaseName)newValue);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__STEPS:
        setSteps((Steps)newValue);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        setExpect((Expectations)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        setCaseName((CaseName)null);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__STEPS:
        setSteps((Steps)null);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        setExpect((Expectations)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        return caseName != null;
      case TestLanguagePackage.CASE_DESCRIPTION__STEPS:
        return steps != null;
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        return expect != null;
    }
    return super.eIsSet(featureID);
  }

} //CaseDescriptionImpl
