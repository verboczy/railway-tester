/**
 * generated by Xtext 2.9.1
 */
package hu.bme.mit.modes3.test.testLanguage.impl;

import hu.bme.mit.modes3.test.testLanguage.CaseDescription;
import hu.bme.mit.modes3.test.testLanguage.CaseName;
import hu.bme.mit.modes3.test.testLanguage.Comment;
import hu.bme.mit.modes3.test.testLanguage.Component;
import hu.bme.mit.modes3.test.testLanguage.Expectations;
import hu.bme.mit.modes3.test.testLanguage.TestLanguagePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Case Description</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getCaseName <em>Case Name</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link hu.bme.mit.modes3.test.testLanguage.impl.CaseDescriptionImpl#getExpect <em>Expect</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CaseDescriptionImpl extends MinimalEObjectImpl.Container implements CaseDescription
{
  /**
   * The cached value of the '{@link #getCaseName() <em>Case Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCaseName()
   * @generated
   * @ordered
   */
  protected CaseName caseName;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected Comment comment;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> components;

  /**
   * The cached value of the '{@link #getExpect() <em>Expect</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpect()
   * @generated
   * @ordered
   */
  protected EList<Expectations> expect;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CaseDescriptionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestLanguagePackage.Literals.CASE_DESCRIPTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CaseName getCaseName()
  {
    return caseName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCaseName(CaseName newCaseName, NotificationChain msgs)
  {
    CaseName oldCaseName = caseName;
    caseName = newCaseName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, oldCaseName, newCaseName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCaseName(CaseName newCaseName)
  {
    if (newCaseName != caseName)
    {
      NotificationChain msgs = null;
      if (caseName != null)
        msgs = ((InternalEObject)caseName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, null, msgs);
      if (newCaseName != null)
        msgs = ((InternalEObject)newCaseName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, null, msgs);
      msgs = basicSetCaseName(newCaseName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME, newCaseName, newCaseName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comment getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComment(Comment newComment, NotificationChain msgs)
  {
    Comment oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__COMMENT, oldComment, newComment);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComment(Comment newComment)
  {
    if (newComment != comment)
    {
      NotificationChain msgs = null;
      if (comment != null)
        msgs = ((InternalEObject)comment).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__COMMENT, null, msgs);
      if (newComment != null)
        msgs = ((InternalEObject)newComment).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TestLanguagePackage.CASE_DESCRIPTION__COMMENT, null, msgs);
      msgs = basicSetComment(newComment, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestLanguagePackage.CASE_DESCRIPTION__COMMENT, newComment, newComment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<Component>(Component.class, this, TestLanguagePackage.CASE_DESCRIPTION__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expectations> getExpect()
  {
    if (expect == null)
    {
      expect = new EObjectContainmentEList<Expectations>(Expectations.class, this, TestLanguagePackage.CASE_DESCRIPTION__EXPECT);
    }
    return expect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        return basicSetCaseName(null, msgs);
      case TestLanguagePackage.CASE_DESCRIPTION__COMMENT:
        return basicSetComment(null, msgs);
      case TestLanguagePackage.CASE_DESCRIPTION__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        return ((InternalEList<?>)getExpect()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        return getCaseName();
      case TestLanguagePackage.CASE_DESCRIPTION__COMMENT:
        return getComment();
      case TestLanguagePackage.CASE_DESCRIPTION__COMPONENTS:
        return getComponents();
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        return getExpect();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        setCaseName((CaseName)newValue);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__COMMENT:
        setComment((Comment)newValue);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends Component>)newValue);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        getExpect().clear();
        getExpect().addAll((Collection<? extends Expectations>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        setCaseName((CaseName)null);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__COMMENT:
        setComment((Comment)null);
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__COMPONENTS:
        getComponents().clear();
        return;
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        getExpect().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestLanguagePackage.CASE_DESCRIPTION__CASE_NAME:
        return caseName != null;
      case TestLanguagePackage.CASE_DESCRIPTION__COMMENT:
        return comment != null;
      case TestLanguagePackage.CASE_DESCRIPTION__COMPONENTS:
        return components != null && !components.isEmpty();
      case TestLanguagePackage.CASE_DESCRIPTION__EXPECT:
        return expect != null && !expect.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CaseDescriptionImpl
