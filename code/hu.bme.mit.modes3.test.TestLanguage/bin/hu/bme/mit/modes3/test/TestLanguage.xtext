grammar hu.bme.mit.modes3.test.TestLanguage with org.eclipse.xtext.common.Terminals

generate testLanguage "http://www.bme.hu/mit/modes3/test/TestLanguage"

Model:
	(caseDescription += CaseDescription)*		// At least one pair of steps and expectations. 
;

// A pair of steps and expectations.
CaseDescription:
	'[TestCase]'
	(caseName = CaseName)
	(comment = Comment)?
	(components += Component)+
	(expect += Expectations)+
;

CaseName:
	'Name of the test case is ' name = ID 
;

Comment:
	'Short description' ':' comment = STRING
;

Component:
	'[Component]'
	(turnout = Turnout)
	(section = Section)
;

// A turnout has a state.
Turnout:
	'Turnout ' turnoutID = INT ' is ' turnoutState = ('STRAIGHT' | 'DIVERGENT')
;

// A section has a position where it connects to the turnout, and a state.
Section:
	(straightSection = StraightSection)
	(divergentSection = DivergentSection)
	(topSection = TopSection)
;

StraightSection:
	'Section connecting from STRAIGHT is ' straightSectionState = ('FREE' | 'OCCUPIED')
	'Straight id' ':' strID = INT
;

DivergentSection:
	'Section connecting from DIVERGENT is ' divergentSectionState = ('FREE' | 'OCCUPIED')
	'Divergent id' ':' divID = INT
;

TopSection:
	'Section connecting from TOP is ' topSectionState = ('FREE' | 'OCCUPIED')
	'Top id' ':' topID = INT
;

// Shows which sections are expected state of each section
Expectations:
	'[ExpectedComponents]'
	'Turnout ' expectedTurnoutID = INT
	(straightExpectation = StraightExpectation)
	(divergentExpectation = DivergentExpectation)
	(topExpectation = TopExpectation)
;

StraightExpectation:
	'Section connecting from STRAIGHT is expected to be ' straightExpectedState = ('ENABLED' | 'DISABLED')
	'Straight id' ':' strID = INT
;

DivergentExpectation:
	'Section connecting from DIVERGENT is expected to be ' divergentExpectedState = ('ENABLED' | 'DISABLED')
	'Divergent id' ':' divID = INT
;

TopExpectation:
	'Section connecting from TOP is expected to be ' topExpectedState = ('ENABLED' | 'DISABLED')
	'Top id' ':' topID = INT
;
